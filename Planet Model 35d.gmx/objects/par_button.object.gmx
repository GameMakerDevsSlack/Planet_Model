<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>par_global_button</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Default Create

image_speed = 0;
visible = false;

window_local_x = 0;
window_local_y = 0;
fixed = false;

width = 0;
height = 0;

mouse_click = false;
mouse_over = false;
mouse_down = false;
window_mouse_down_x = 0;
window_mouse_down_y = 0;

text = "";
font = fnt_default;

sprite_button = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Default Destroy

//Delete the entry in the parent's list
ds_list_delete( parent.window_buttons, ds_list_find_index( parent.window_buttons, id ) );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Default Draw

d3d_transform_stack_push();

if ( fixed ) {
    d3d_transform_add_translation( -parent.window_screen_x,
                                   -parent.window_screen_y, 0 );
} else {
    d3d_transform_add_translation( -parent.window_screen_x - ( parent.window_scroll_x_offset * parent.window_scroll_x_scale ),
                                   -parent.window_screen_y - ( parent.window_scroll_y_offset * parent.window_scroll_y_scale ), 0 );
}

if ( sprite_button ) {
    
    if ( mouse_over ) {
        draw_sprite_ext( sprite_index, 0,   x, y,   1, 1,  0,  c_button_over, 1 );
    } else {
        draw_sprite_ext( sprite_index, 0,   x, y,   1, 1,  0,  c_button_background, 1 );
    }
    
    draw_sprite_ext( sprite_index, 1,   x, y,   1, 1,  0,  c_button_border, 1 );
    
    if ( mouse_down ) and ( mouse_over ) draw_sprite_ext( sprite_index, 2, x, y,  1, 1,  0,  c_button_down, 1 );
    
    
} else {
    
    if ( mouse_down ) draw_set_color( c_button_down ) else if ( mouse_over ) draw_set_color( c_button_over ) else draw_set_color( c_button_border );
    draw_rectangle( x, y,   x + width, y + height,   false );
    draw_set_color( c_off_white );
    draw_set_font( font );
    draw_text( x + 5, y, text );
    draw_set_color( c_white );
    
}

d3d_transform_stack_pop();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Default Step

var clickable;

//If the button is a "fixed element" then it doesn't move with the scrolling
if ( fixed ) {
    x = parent.window_screen_x + window_local_x;
    y = parent.window_screen_y + window_local_y;
} else {
    x = parent.window_screen_x + window_local_x - ( parent.window_scroll_x_offset * parent.window_scroll_x_scale );
    y = parent.window_screen_y + window_local_y - ( parent.window_scroll_y_offset * parent.window_scroll_y_scale );
}

clickable = true;

//Reset the mouse_click flag. Since it gets set further down (if applicable), this flag only exists for a single frame
mouse_click = false;

//There are a few conditions that prevent a button from being considered "clickable"
//If this button is sprite-based and the mouse is outside the sprite
if ( sprite_button ) and ( !instance_position( mouse_x, mouse_y, id ) ) clickable = false;

//If this button is not sprite-based and the mouse is outside the box
if ( !sprite_button ) and ( !point_in_rectangle( mouse_x, mouse_y,  x, y,  x + width - 1, y + height - 1 ) ) clickable = false;

//If the parent window is being moved around
if ( parent.window_moving ) clickable = false;

//If the mouse is over any window BUT the parent
if ( obj_window_layer.window_global_mouse_over != parent ) clickable = false;
//...otherwise the button is clickable!

if ( clickable ) {
    
    //If the button is clickable then the mouse must be over the button
    mouse_over = true;
    
    if ( mouse_check_button_pressed( mb_left ) ) {
    
        //The user has clicked the button
        mouse_down = true;
        
        //Note where on the button the user has clicked (this is mostly used for draggable elements)
        window_mouse_down_x = mouse_x - x;
        window_mouse_down_y = mouse_y - y;
        
    } else {
        
        if ( mouse_down ) and ( !mouse_check_button( mb_left ) ) {
            
            //Set the mouse click flag
            mouse_click = true;
            
            //And record that the mouse has been released
            mouse_down = false;
            
        }
    }
    
    //Tell the parent window that a button has been pressed
    if ( mouse_down ) parent.window_button_pressed = id;
    
} else {
    
    //Default state
    mouse_over = false;
    if ( !mouse_check_button( mb_left ) ) or ( obj_window_layer.window_global_mouse_over != parent ) mouse_down = false;
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Default Initialisation

//!!! Is overriden in move_bar_obj

if ( sprite_button ) {
    
    width  = sprite_get_width(  sprite_index );
    height = sprite_get_height( sprite_index );
    
} else if ( text != "" ) {

    draw_set_font( font );    
    width  = string_width(  text ) + 10;
    height = string_height( text );
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
