<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialisation

//Start the ticketing system
scr_init_ticketing();

name = "Unknown user";
socket = noone;
ip = "";

//Seeds are always integers, starting with a non-integer ensures the ticketing system sends off proper seed request
user_seed = 0.1;

//If the user has started the game
user_started = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Tidy up the mess

network_destroy( socket ); //Destroy the socket
scr_destroy_ticketing(); //Destroy some data structures

if ( instance_exists( obj_server ) ) ds_map_delete( obj_server.socket_to_inst_map, socket ); //Remove this instance from the server listing
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Client dropout

scr_process_timed_tickets();

var action;
action = ds_queue_dequeue( ticket_queue );

switch( action ) {
    
    case tkt_ping: {
        scr_request_ping();
        scr_add_timed_ticket( id, tkt_ping, server_req_ping_time ); //Add a ticket to fire off another ping to the server
        scr_add_timed_ticket( id, tkt_ping_timeout, server_check_client_timeout ); //Add a ticket to catch a timeout
        break;
    }
    
    case tkt_ping_timeout: {
        scr_user_disconnect();
        ds_list_add( log, "!!! client timeout !!!" );
        break;
    }
    
    case tkt_request_seed: {
        if ( user_seed != world_seed ) {
            scr_server_send_regenerate( id );
            scr_add_timed_ticket( id, tkt_request_seed, 3000 );
        }
    }
    
    case tkt_check_start: {
        if ( user_started != true ) and ( obj_camera.reveal ) {
            scr_server_send_start( id );
            scr_add_timed_ticket( id, tkt_check_start, 500 );
        }
    }
}

if ( keyboard_check_pressed( ord( "T" ) ) ) {
    scr_net_send_list( id, msg_list_terrain_height , obj_world.lst_terrain_height , buffer_f32 );
    scr_net_send_list( id, msg_list_terrain_wetness, obj_world.lst_terrain_wetness, buffer_f32 );
}
if ( keyboard_check_pressed( ord( "Y" ) ) ) {
    scr_net_send_list( id, msg_list_terrain_tempr  , obj_world.lst_terrain_tempr  , buffer_f32 );
    scr_net_send_list( id, msg_list_terrain_tree   , obj_world.lst_terrain_tree   , buffer_f32 );
}
if ( keyboard_check_pressed( ord( "U" ) ) ) {
    scr_net_send_list( id, msg_list_terrain_feature, obj_world.lst_terrain_feature, buffer_f32 );
    scr_net_send_list( id, msg_list_terrain_colour , obj_world.lst_terrain_colour , buffer_f32 );
}
if ( keyboard_check_pressed( ord( "I" ) ) ) {
    scr_net_send_list( id, msg_list_terrain_seed   , obj_world.lst_terrain_seed   , buffer_f32 );
    scr_net_send_list( id, msg_list_terrain_light  , obj_world.lst_terrain_light  , buffer_f32 );
    scr_net_send_list( id, msg_list_terrain_rim    , obj_world.lst_terrain_rim    , buffer_f32 );
}

if ( keyboard_check_pressed( ord( "G" ) )  ) scr_server_send_regenerate( id );
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
