<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>par_window</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

window_width = 650;
window_height = 360;

window_local_x = ( room_width - window_width ) / 2;
window_local_y = ( room_height - window_height ) / 2;

window_closeable = false;
window_moveable = true;

old_colour = c_user_colour;
colour_model_focus = 0;
colour_lock = false;

scr_window_add_button( btn_colour_ryb_red       , id,   noone,  50 );
scr_window_add_button( btn_colour_ryb_yellow    , id,   noone,  80 );
scr_window_add_button( btn_colour_ryb_blue      , id,   noone, 110 );

scr_window_add_button( btn_colour_rgb_red       , id,   noone, 160 );
scr_window_add_button( btn_colour_rgb_green     , id,   noone, 190 );
scr_window_add_button( btn_colour_rgb_blue      , id,   noone, 220 );

scr_window_add_button( btn_colour_hsv_hue       , id,   noone, 270 );
scr_window_add_button( btn_colour_hsv_saturation, id,   noone, 300 );
scr_window_add_button( btn_colour_hsv_value     , id,   noone, 330 );

scr_window_add_button( btn_colour_lock          , id,      15, 135 );


scr_window_add_button( btn_colour_accept, id,   window_width - 32,     0 );
scr_window_add_button( btn_colour_close,  id,   window_width - 70,     0 );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw

//Draw to the window's surface
scr_window_pre_draw();

draw_set_color( c_window_text );
draw_set_halign( fa_left );
draw_set_font( fnt_default );
draw_text( 10, 10, "Colour picker" );

draw_set_font( fnt_smallish );
draw_set_valign( fa_middle );


if ( !window_self_destroy ) {
    
    draw_set_color( c_window_text );
    draw_text( window_width/2 - 60, btn_colour_ryb_red.window_local_y       , string( floor( 255 * btn_colour_ryb_red.colour_value ) ) );
    draw_text( window_width/2 - 60, btn_colour_ryb_yellow.window_local_y    , string( floor( 255 * btn_colour_ryb_yellow.colour_value ) ) );
    draw_text( window_width/2 - 60, btn_colour_ryb_blue.window_local_y      , string( floor( 255 * btn_colour_ryb_blue.colour_value ) ) );
    
    draw_text( window_width/2 - 60, btn_colour_rgb_red.window_local_y       , string( floor( 255 * btn_colour_rgb_red.colour_value ) ) );
    draw_text( window_width/2 - 60, btn_colour_rgb_green.window_local_y     , string( floor( 255 * btn_colour_rgb_green.colour_value ) ) );
    draw_text( window_width/2 - 60, btn_colour_rgb_blue.window_local_y      , string( floor( 255 * btn_colour_rgb_blue.colour_value ) ) );
    
    draw_text( window_width/2 - 60, btn_colour_hsv_hue.window_local_y       , string( floor( 255 * btn_colour_hsv_hue.colour_value ) ) );
    draw_text( window_width/2 - 60, btn_colour_hsv_saturation.window_local_y, string( floor( 255 * btn_colour_hsv_saturation.colour_value ) ) );
    draw_text( window_width/2 - 60, btn_colour_hsv_value.window_local_y     , string( floor( 255 * btn_colour_hsv_value.colour_value ) ) );

}

draw_set_color( c_user_colour );
draw_rectangle( window_width/2, 50, window_width - 25, window_height - 25, false );

draw_set_color( c_window_border );
draw_rectangle( window_width/2, 50, window_width - 25, window_height - 25, true );
draw_rectangle( window_width/2 + 1, 51, window_width - 26, window_height - 26, true );


draw_line( 15, btn_colour_ryb_yellow.window_local_y, 30, btn_colour_ryb_yellow.window_local_y );
draw_line( 15, btn_colour_rgb_green.window_local_y, 30, btn_colour_rgb_green.window_local_y );
draw_line( 15, btn_colour_hsv_saturation.window_local_y, 30, btn_colour_hsv_saturation.window_local_y );
draw_line( 15, btn_colour_ryb_yellow.window_local_y, 15, btn_colour_hsv_saturation.window_local_y );
draw_rectangle( 30, btn_colour_ryb_red.window_local_y - 13, window_width/2 - 25, btn_colour_ryb_blue.window_local_y + 13, true );
draw_rectangle( 30, btn_colour_rgb_red.window_local_y - 13, window_width/2 - 25, btn_colour_rgb_blue.window_local_y + 13, true );
draw_rectangle( 30, btn_colour_hsv_hue.window_local_y - 13, window_width/2 - 25, btn_colour_hsv_value.window_local_y + 13, true );

event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Add to default step event

event_inherited();

if ( !window_self_destroy ) {
        
    if ( colour_model_focus == 0 ) {
        
        c_user_colour = make_colour_ryb( btn_colour_ryb_red.colour_value, btn_colour_ryb_yellow.colour_value, btn_colour_ryb_blue.colour_value );
        
    } else if ( colour_model_focus == 1 ) {
        
        c_user_colour = make_color_rgb( btn_colour_rgb_red.colour_value * 255,
                                        btn_colour_rgb_green.colour_value * 255,
                                        btn_colour_rgb_blue.colour_value * 255 );
        
        scr_set_colour_button_position( btn_colour_hsv_hue       , color_get_hue( c_user_colour ) / 255 );
        scr_set_colour_button_position( btn_colour_hsv_saturation, color_get_saturation( c_user_colour ) / 255 );
        scr_set_colour_button_position( btn_colour_hsv_value     , color_get_value( c_user_colour ) / 255 );
        
    } else if ( colour_model_focus == 2 ) {
        
        c_user_colour = make_color_hsv( btn_colour_hsv_hue.colour_value * 255,
                                        btn_colour_hsv_saturation.colour_value * 255,
                                        btn_colour_hsv_value.colour_value * 255 );
        
        scr_set_colour_button_position( btn_colour_rgb_red       , color_get_red( c_user_colour ) / 255 );
        scr_set_colour_button_position( btn_colour_rgb_green     , color_get_green( c_user_colour ) / 255 );
        scr_set_colour_button_position( btn_colour_rgb_blue      , color_get_blue( c_user_colour ) / 255 );
        
    }
    
    if ( colour_lock ) {
        
        if ( colour_model_focus &gt;= 1 ) {
            
            ryb_rgb_to_components( btn_colour_rgb_red.colour_value, btn_colour_rgb_green.colour_value, btn_colour_rgb_blue.colour_value, k_ryb_table, 2 );
            
            c_user_colour = make_colour_ryb( result_coord[0], result_coord[1], result_coord[2] );
            
            scr_set_colour_button_position( btn_colour_ryb_red       , result_coord[0] );
            scr_set_colour_button_position( btn_colour_ryb_yellow    , result_coord[1] );
            scr_set_colour_button_position( btn_colour_ryb_blue      , result_coord[2] );
            
        }
        
        if ( colour_model_focus &gt;= 0 ) {
            
            scr_set_colour_button_position( btn_colour_rgb_red       , color_get_red( c_user_colour ) / 255 );
            scr_set_colour_button_position( btn_colour_rgb_green     , color_get_green( c_user_colour ) / 255 );
            scr_set_colour_button_position( btn_colour_rgb_blue      , color_get_blue( c_user_colour ) / 255 );
            
            scr_set_colour_button_position( btn_colour_hsv_hue       , color_get_hue( c_user_colour ) / 255 );
            scr_set_colour_button_position( btn_colour_hsv_saturation, color_get_saturation( c_user_colour ) / 255 );
            scr_set_colour_button_position( btn_colour_hsv_value     , color_get_value( c_user_colour ) / 255 );
            
        }
        
    }
    
}

colour_model_focus = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
