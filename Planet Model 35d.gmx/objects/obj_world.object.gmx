<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///The fun stuff

//Take a deep breath...
time_to_generate = current_time;

//Set up the dynamic throttling system - a bit of a hack that emulates asynchronous processing
//If the FPS drops below a threshold (95% of the room_speed) then the game reduces the number of tiles being processed a step
//If the FPS hits room_speed then the game inreases the number of tiles being processed
//This keeps the game awake and active during the generation process so that the player can do low-impact stuff as the game is generating the world

if ( !code_is_compiled() ) { //Run this in the compiler please. It's about 3 times as fast!
    index_per_step = 200;
    max_index_per_step = 600;
    chunk_per_step = min( k_chunks, floor( 800 / k_chunk_size ) );
} else {
    index_per_step = 500;
    max_index_per_step = 1500;
    chunk_per_step = min( k_chunks, floor( 2400 / k_chunk_size ) );
}

adjusted_index_per_step = index_per_step; //The actual number of indices to process per step

//Different bits of generation hit the process harder and slower, these values pre-correct for slowdown
deletion_factor = 110; //Deleting indices from lists is really slow!
generation_factor = 30; //Some of the terrain generation bits, especially add_to_circle_of_hexes(), are slow too

progress = 0; //Progress from nothing, 0, to a complete and developed globe, 1.
generation_phase = 0; //What phase of generation we're on
generation_finished = false; //If we're finished or not
phase_text = "Initialising..."; //Debug text

regeneration = false; //If we're regenerating the globe or not. Regeneration changes how "progress" is calculated

//Variables used during the subdivision loop. Mostly legacy variables from when the entire generation process froze the game
subdivision_count = 0;
index = 0;
old_face_count = 0;

update_chunk = 0;

ds_list_add( log, "~~~ World generation starting" );

//Create a starfield. We only need to do this once
random_set_seed( world_seed );
model_starfield = scr_model_starfield();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Generation loop
//The really fun part - abandon all hope.

var i;

if ( !generation_finished ) switch ( generation_phase ) {
    
    case 0: { //generation_phase == 0
        phase_text = "Creating dodecahedron...";
        ds_list_add( log, phase_text + " (" + string( current_time - time_to_generate ) + ")" );
        
        scr_tri_init(); //We start my creating a bunch of lists to hold all the triangle data
        scr_tri_dodecahedron(); //A starting point. Other regular polyhedrons don't work nearly as well
        
        subdivision_count = 0;
        
        progress = 0;
        generation_phase++;
        break;
    }
    
    case 1: { //generation_phase == 1
        phase_text = "Preparing subdivision " + string( subdivision_count + 1 ) + "...";
        ds_list_add( log, phase_text + " (" + string( current_time - time_to_generate ) + ")" );
        
        index = 0; //Start at face 0
        old_face_count = ds_list_size( lst_tri_a_x ); //Make a note of how many triangles there current are - these will all get deleted in phase 4
        
        progress = subdivision_count;
        generation_phase++;
        break;
    }
    
    case 2: { //generation_phase == 2
        phase_text = "Subdivision " + string( subdivision_count + 1 ) + ", tri " + string( index ) + "...";
        if ( index == 0 ) ds_list_add( log, phase_text + " (" + string( current_time - time_to_generate ) + ")" );
        
        //Repeat until either we've hit our cap for indices per step or we've processed all the old faces
        repeat( min( old_face_count - index, adjusted_index_per_step ) ) {
            
            scr_tri_subdivide( index ); //Add three new triangles (faces) to the model based on an extant face
            index++; //Iterate!
            
        }
        
        progress = min( 1, index / ( old_face_count * 5 ) ) + subdivision_count;
        
        //If we've processed all the old faces, go to the next phase
        if ( index &gt;= old_face_count ) {
            
            index = old_face_count; //Start from the first new face
            generation_phase++; //Advance to the next phase
            
        }
        
        break;
    }
    
    case 3: { //generation_phase == 3
        phase_text = "Subdivision " + string( subdivision_count + 1 ) + ", neighbour assignment " + string( index ) + "...";
        if ( index == old_face_count ) ds_list_add( log, phase_text + " (" + string( current_time - time_to_generate ) + ")" );
        
        //Repeat until either we've hit our cap for indices per step or we've processed all the new faces
        repeat( min( ds_list_size( lst_tri_a_x ) - index, adjusted_index_per_step ) ) {
            
            scr_tri_set_neighbours( index, old_face_count ); //Give this face three neighbours based on the neighbour relationships of its parent
            index++;
            
        }
        
        progress = min( 1, index / ( old_face_count * 5 ) ) + subdivision_count;
        
        //If we've processed all the new faces, go to the next phase
        if ( index &gt;= ds_list_size( lst_tri_a_x ) ) {
            
            index = old_face_count; //Start from the first new face
            scr_tri_init_new();
            
            generation_phase++;
        }
        
        break;
    }
    
    case 4: { //generation_phase == 4
        phase_text = "Subdivision " + string( subdivision_count + 1 ) + ", deleting " + string( index ) + "...";
        if ( index == 0 ) ds_list_add( log, phase_text + " (" + string( current_time - time_to_generate ) + ")" );
        
        //Repeat until either we've hit our cap for indices per step or we've processed all the old faces
        repeat( min( ds_list_size( lst_tri_a_x ) - index, adjusted_index_per_step ) ) {
            
            scr_tri_copy_to_new( index );
            index++;
            
        }
        
        progress = min( 1, ( index + old_face_count * 4 ) / ( old_face_count * 5 ) ) + subdivision_count;
        
        //If we've processed all the old faces
        if ( index &gt;= ds_list_size( lst_tri_a_x ) - 1 ) {
            
            scr_tri_new_to_old();
            
            //And if we've made all the necessary subdivision passes
            if ( subdivision_count &gt;= k_subdivisions - 1 ) {
                
                generation_phase++; //Move to the next phase
                
            } else { //If we've not made all the subdivision passes
                
                //Increment the subdivision counter
                subdivision_count++;
                
                //10 PRINT "BUTTS "
                //20 GOTO 10
                //(Go back to phase 1 to start the subdivision pass again)
                generation_phase = 1;
            }
            
        }
        break;
    }
    
    case 5: { //generation_phase == 5
        phase_text = string( ds_list_size( lst_tri_a_x ) ) + " triangles formed. Initialising hexes...";
        ds_list_add( log, phase_text + " (" + string( current_time - time_to_generate ) + ")" );
        
        //Our subdivision uses a centre point on the inside of the spherical curvature rather than the outside - it's quicker that way
        //This looks weird but fortunately we can "pop" the vertices by forcing them to the very edge of the sphere
        //Feel free to take this out if you wanna see the result!
        scr_tri_pop_all();
        
        //Now we create some lists to store information about hexes (and pents). Up until this point, we've been dealing with triangles
        scr_hex_init();
        
        //And we also start the hex determination process as well
        scr_hex_create_from_tri_begin();
        
        progress = k_subdivisions;
        
        generation_phase++;
        break;
    }
    
    case 6: { //generation_phase == 6
        phase_text = "Forming hexes from faces...";
        if ( ds_list_size( search_face_stack ) &lt;= 1 ) ds_list_add( log, phase_text + " (" + string( current_time - time_to_generate ) + ")" );
        
        //Create hexes by doing a kinda floodfill across the surface of the globe
        repeat( adjusted_index_per_step ) if( !ds_list_empty( search_face_stack ) ) scr_hex_create_from_tri();
        
        progress = min( 1, ds_list_size( lst_hex_x ) / ( ds_list_size( lst_tri_a_x ) * 6 ) ) + k_subdivisions + 1;
        
        //If we've emptied the entire hex stack (hopefully passing every hex in the process...) then go to the next phase
        if( ds_list_empty( search_face_stack ) ) generation_phase++;
        
        break;
    }
    
    case 7: { //generation_phase == 7
        phase_text = string( ds_list_size( lst_hex_x ) ) + " hexes formed. Cleaning up...";
        ds_list_add( log, phase_text + " (" + string( current_time - time_to_generate ) + ")" );
        
        //Suuuuper important step. Makes sure the hexes have been formed correctly and neighbour relationships are solid
        scr_hex_create_from_tri_end();
        
        //Free up some memory
        scr_tri_destroy();
        
        //Finally getting there!
        scr_terrain_init();
        
        //Start at the top
        index = 0;
        
        //The generation algorithm hits the CPU pretty hard (though not as hard as ds_list_delete, what is up with that function?)
        adjusted_index_per_step /= generation_factor;
        
        progress = k_subdivisions + 2;
        
        generation_phase++;
        
        break;
    }
    
    
    
    
    
    //regenerate_world drops in here
    
    case 8: { //generation_phase == 8
        phase_text = "Generating noise for tile " + string( index + 1 ) + "...";
        if ( index == 0 ) {
            random_set_seed( world_seed );
            ds_list_add( log, phase_text + " (" + string( current_time - time_to_generate ) + ")" );
        }
        
        //Repeat until either we've hit our cap for indices per step or we've processed all the hexes
        repeat( min( ds_list_size( lst_terrain_height ) - index, adjusted_index_per_step ) ) {
            
            //Make some noise
            scr_terrain_add_height_noise( index, terrain_height_minimum, terrain_height_maximum );
            
            //Make some other noise
            scr_terrain_set_seed( index );
            
            //Iterate!
            index++;
            
        }
        
        progress = min( 1, index / ds_list_size( lst_terrain_height ) ) + k_subdivisions + 2;
        
        //If we've noised all the hexes, move to the next phase
        if ( index &gt;= ds_list_size( lst_terrain_height ) ) {
            
            generation_phase++;
            
            //Return to normaility
            adjusted_index_per_step *= generation_factor;
            
        }
        
        break;
    }
    
    case 9: { //generation_phase == 9
        phase_text = "Smoothing and normalising terrain height...";
        ds_list_add( log, phase_text + " (" + string( current_time - time_to_generate ) + ")" );
        
        //We don't want pentagons to be accessible in normal gameplay
        scr_terrain_all_treat_pentagon();
        
        //Smooth over bumpy ground
        scr_terrain_all_smooth_height( terrain_height_smoothing );
        
        //Put everything on a scale from 0 to 1 so that later operations have a consistent scale
        ds_list_normalise( lst_terrain_height );
        
        //Set terrain transition points to divide up the land
        scr_terrain_set_height_transitions( terrain_water, terrain_hills, terrain_mountains );
        
        //Start again from the first hex
        index = 0;
        
        progress = k_subdivisions + 4;
        
        generation_phase++;
        
        break;
    }
    
    case 10: { //generation_phase == 10
        phase_text = "Generating temperature for tile " + string( index + 1 ) + "...";
        if ( index == 0 ) ds_list_add( log, phase_text + " (" + string( current_time - time_to_generate ) + ")" );
        
        //Repeat until either we've hit our cap for indices per step or we've processed all the hexes
        repeat( min( ds_list_size( lst_terrain_height ) - index, adjusted_index_per_step ) ) {
            
            //ITCZ is from 13.5 degrees to -13.5 degrees; temperature is calculated from 50% height, 40% latitude = 10% random
            scr_terrain_set_temperature( index, terrain_temperature_itcz, terrain_temperature_height / 100, terrain_temperature_latitude / 100 );
            
            //Iterate!
            index++
            
        }
        
        progress = min( 1, index / ds_list_size( lst_terrain_height ) ) + k_subdivisions + 4;
        
        //If all hexes have been processed, define temperature points and move to the next phase
        if ( index &gt;= ds_list_size( lst_terrain_height ) ) {
            
            //5% ice, 18% cold, 40% warm = 40% hot
            scr_terrain_set_temperature_transitions( terrain_temperature_ice, terrain_temperature_cold, terrain_temperature_warm );
            
            //Start from the start
            index = 0;
            
            //Slow down again for the next hard generation step
            adjusted_index_per_step /= generation_factor;
            
            generation_phase++;
        }
        
        break;
    }
    
    case 11: { //generation_phase == 11
        phase_text = "Generating humidity for tile " + string( index + 1 ) + "...";
        if ( index == 0 ) ds_list_add( log, phase_text + " (" + string( current_time - time_to_generate ) + ")" );
        
        //Repeat until either we've hit our cap for indices per step or we've processed all the hexes
        repeat( min( ds_list_size( lst_terrain_height ) - index, adjusted_index_per_step ) ) {
            
            //Water tiles create two wetness disks, one is 3 hexes across and one is 21 hexes across
            scr_terrain_add_wetness( index, terrain_wetness_small, terrain_wetness_large );
            
            //Iterate!
            index++;
        }
        
        progress = min( 1, index / ds_list_size( lst_terrain_height ) ) + k_subdivisions + 5;
        
        //If all hexes have been processed, set wetness points and move on
        if ( index &gt;= ds_list_size( lst_terrain_height ) ) {
            
            //Wetness is non-deterministic and so needs to be normalised
            ds_list_normalise( lst_terrain_wetness );
            
            //25% dry, 20% wet = 55% damp
            scr_terrain_set_wetness_transitions( terrain_wetness_dry, terrain_wetness_wet );
            
            //Speed up again
            adjusted_index_per_step *= generation_factor;
            
            generation_phase++;
        }
        
        break;
    }
    
    case 12: { //generation_phase == 12
        phase_text = "Creating hex borders...";
        ds_list_add( log, phase_text + " (" + string( current_time - time_to_generate ) + ")" );
        
        
        for( i = 0; i &lt; ds_list_size( lst_hex_x ); i++ ) scr_terrain_set_rim( i );
        
        //Set certain terrain tiles to have certain properties, including tree distribution
        //for( i = 0; i &lt; k_hexes; i++ ) scr_terrain_set_light( i );
        
        progress = k_subdivisions + 7;
        
        generation_phase++;
        break;
    }
    
    case 13: { //generation_phase == 13
        phase_text = "Assigning terrain...";
        ds_list_add( log, phase_text + " (" + string( current_time - time_to_generate ) + ")" );
        
        //Set certain terrain tiles to have certain properties, including tree distribution
        scr_terrain_all_assign();
        
        progress = k_subdivisions + 8;
        
        generation_phase++;
        break;
    }
    
    
    
    //regenerate_players drops in here
    
    case 14: { //generation_phase == 14
        phase_text = "Creating start locations...";
        ds_list_add( log, phase_text + " (" + string( current_time - time_to_generate ) + ")" );
        
        scr_game_init();
        
        random_set_seed( world_seed );
        scr_start_players( multiplayer_client_limit );
        
        progress = k_subdivisions + 9;
        
        generation_phase++;
        break;
    }
    
    
    //regenerate models drops in here
    
    case 15: { //generation_phase == 15
        phase_text = "Generating physical chunks...";
        ds_list_add( log, phase_text + " (" + string( current_time - time_to_generate ) + ")" );
        
        //Start the model lists
        scr_model_init();
        
        //Form some chunks
        scr_chunk_init();
        scr_chunk_all_make();
        
        //Start the model skins
        scr_skin_init();
        
        //Create the physical model
        for( i = 0; i &lt; k_chunks; i++ ) scr_model_chunk_physical( i );
        
        //model_physical = generate_physical_model();
        
        progress = k_subdivisions + 10;
        
        generation_phase++;
        break;
    }
    
    case 16: { //generation_phase == 16
        phase_text = "Generating feature chunks...";
        ds_list_add( log, phase_text + " (" + string( current_time - time_to_generate ) + ")" );
        
        //Make the features model
        for( i = 0; i &lt; k_chunks; i++ ) scr_model_chunk_features( i );
        
        progress = k_subdivisions + 11;
        
        generation_phase++;
        break;
    }
    
    case 17: { //generation_phase == 17
        phase_text = "Generation finished!";
        ds_list_add( log, "~~~ World generation finished (" + string( current_time - time_to_generate ) + ")" );
        
        //...aaaand relax.
        time_to_generate = ( current_time - time_to_generate ) / 1000;
        generation_finished = true;
        
        if ( instance_exists( obj_client ) ) with( obj_client ) scr_client_finished_regen();
        
        progress = k_subdivisions + 12;
        break;
    }
    
}

//Calculate "progress". This is used for the loading bar
//if ( regeneration ) progress = ( progress - k_subdivisions - 2 ) / 6 else progress /= k_subdivisions + 12;
progress /= k_subdivisions + 12;

//Catch any bugs
if ( generation_finished ) progress = 1;

//Do some throttling. We use ceil() and floor() so that changes make a tangible difference
if ( fps_real &lt; room_speed * 0.9 ) adjusted_index_per_step = floor( max( 1, adjusted_index_per_step * 0.8 ) );
if ( fps_real &gt;= room_speed ) adjusted_index_per_step = ceil( min( max_index_per_step, adjusted_index_per_step * 1.1 ) );
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Lighting

var i;

if ( generation_finished ) and ( obj_camera.reveal ) {
    
    scr_chunk_all_occlude();
    
    if ( obj_camera.camera_layer_view == k_tech      ) scr_skin_update_tech();
    if ( obj_camera.camera_layer_view == k_economy   ) scr_skin_update_economy();
    if ( obj_camera.camera_layer_view == k_influence ) scr_skin_update_influence();
    if ( obj_camera.camera_layer_view == k_military  ) scr_skin_update_military();
    if ( obj_camera.camera_layer_view == k_physical ) {
        
        terrain_light_offset = ( terrain_light_offset + 0.0004 * d_time_mod ) mod ( 2 * pi );
        terrain_light_sin_offset = sin( terrain_light_offset );
        terrain_light_cos_offset = cos( terrain_light_offset );
        
        if ( fancy_lighting ) scr_skin_update_lighting();
        
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
