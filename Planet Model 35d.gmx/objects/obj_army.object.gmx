<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>par_game_draw</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

assigned_faction = noone;
colour = c_black;

pop_up_pos = 0;
pop_up_min = 1;
pop_up_max = 1.5;
pop_speed = 0.2;
pop_up = lerp( pop_up_min, pop_up_max, pop_up_pos );

path = noone;
path_ind = 0;
path_tween = 0;
can_attack = true;

hue = 0;
sat = 1;
lum = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with( path ) instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var can_pop;

can_pop = false;

if ( obj_camera.inst_selected == id ) can_pop = true;
if ( obj_camera.mouse_inst_over_id == id ) can_pop = true;
if ( obj_camera.mouse_inst_down_id == id ) can_pop = true;
if ( instance_exists( par_game ) ) if ( par_game.next_turn ) can_pop = false;

if ( can_pop ) {
    pop_up_pos = min( 1, pop_up_pos + pop_speed );
} else {
    pop_up_pos = max( 0, pop_up_pos - pop_speed );
}

pop_up = lerp( pop_up_min, pop_up_max, pop_up_pos );

if ( path == noone ) path_pos = 0 else {
    if ( keyboard_check( vk_right ) ) path_pos = min( 1, path_pos + 1/120 );
    if ( keyboard_check( vk_left ) ) path_pos = min( 1, path_pos - 1/120 );
    if ( keyboard_check( vk_up ) ) path_pos = 1;
    if ( keyboard_check( vk_down ) ) path_pos = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ( obj_camera.camera_layer_view == k_tech ) or ( obj_camera.camera_layer_view == k_economy ) exit;

var temp_scale;
temp_scale = k_model_scale * pop_up;

d3d_transform_set_identity();
d3d_transform_add_rotation_y( rotation );
d3d_transform_add_translation( x_offset, 0, y_offset );

if ( path == noone ) d3d_add_transform_to_hex( hex_location ) else {
    scr_get_path_real_coord( path, path_ind, path_tween );
    d3d_add_transform_to_coord( result_coord[0], result_coord[1], result_coord[2] );
}

with( obj_camera ) d3d_transform_add_rotation_axis( camera_quat_a, camera_quat_b, camera_quat_c, camera_quat_d );


if ( obj_camera.camera_layer_view == k_physical ) and ( fancy_lighting ) {

    shader_set( shd_ez_light );
    shader_set_uniform_f( shader_blend, ds_list_find_value( obj_world.lst_terrain_light, hex_location ) );
    
    scr_draw_flag( 1.2 * temp_scale, 12 * temp_scale, 8 * temp_scale, faction.dark_colour, faction.colour, faction.dark_colour, 1 );
    
    shader_reset();

} else scr_draw_flag( 1.2 * temp_scale, 12 * temp_scale, 8 * temp_scale, faction.dark_colour, faction.colour, faction.dark_colour, 1 );;

d3d_transform_set_identity();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
