<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>par_game</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialise

//Report to the log
ds_list_add( log, "~~~ SERVER mode started" );

event_inherited();

//Init aync message variables
msg_socket = noone;
msg_type = noone;
msg_ip = noone;
msg_new_socket = noone;

//Start ticketing system
scr_init_ticketing();

//Quick 1-to-1 look up data structure
socket_to_inst_map = ds_map_create();

//Attempt server creation
socket = network_create_server( network_socket_tcp, multiplayer_port, multiplayer_client_limit );
ds_list_add( log, "socket = " + string( socket ) );

//Failure handling
if ( socket &lt; 0 ) {
    
    ds_list_add( log, "!!! server socket init failure !!!" );
    instance_destroy();
    
} else {
    
    ds_list_add( chat, "The server has been opened." );
    
    if ( instance_exists( wnd_server ) ) with( wnd_server ) {
        scr_window_add_button( btn_server_disconnect, id,   120, 100 );
        scr_window_add_button( btn_server_start, id,   240, 100 );
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Tidy up

event_inherited();

scr_destroy_ticketing();

ds_map_destroy( socket_to_inst_map );

with( obj_user ) instance_destroy();

if ( socket &gt;= 0 ) network_destroy( socket );

ds_list_add( log, "!!! server disconnected !!!" );
ds_list_add( chat, "The server has been closed." );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Step

scr_process_timed_tickets();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Preliminary network handling
//Deal with new connections, disconnections and new packets. Actual behaviour is in the next piece of code.

var inst;

//Grab data from the packet
msg_socket = ds_map_find_value( async_load, "id" );
msg_type   = ds_map_find_value( async_load, "type" );
msg_ip     = ds_map_find_value( async_load, "ip");
msg_new_socket = noone;

if ( msg_type == network_type_connect ) { //If this message indicates a new connection
    
    //Grab the socket
    msg_new_socket = ds_map_find_value( async_load, "socket" );
    
    //Set timeout to 20% higher than the manual timeout to catch rejected connections1
    //This time out is automatic behind the scenes in GameMaker
    network_set_timeout( msg_new_socket, server_check_client_timeout * 1.1, client_check_server_timeout * 1.1 );

    msg_type = "network_type_connect";
    ds_list_add( log, "network_type_connect on new socket " + string( msg_new_socket ) );
    
    //If there's a spare client slot
    if ( instance_number( obj_user ) + 1 &lt; multiplayer_client_limit ) {
        
        //Create a new client
        inst = instance_create( 0, 0, obj_user );
        inst.name = "Unknown user";
        inst.socket = msg_new_socket;
        inst.ip = msg_ip;
        
        //Update the map. This means messages from a certain socket definitely head to a certain client
        ds_map_add( socket_to_inst_map, msg_new_socket, inst );
        
        ds_list_add( log, "player added, inst = " + string( inst ) + ", socket = " + string( msg_new_socket ) );
        
    } else {
        
        //If there's no spare slot, decline the connection
        scr_packet_start( msg_new_socket );
        scr_packet_add( buffer_u16, server_rejection_msg );
        scr_packet_send();
        
        ds_list_add( log, "player rejected (server full)" );
    }
    
} else if ( msg_type == network_type_disconnect ) { //If this message is a disconnection
    
    //Grab the socket
    msg_new_socket = ds_map_find_value( async_load, "socket" );
    
    //Work out what obj_client this socket is attached to
    inst = ds_map_find_value( socket_to_inst_map, msg_new_socket );
    
    //If this socket is attached properly to a obj_client
    if ( instance_exists( inst ) ) {
        with( inst ) instance_destroy();
    } else {
        ds_list_add( log, "!!! socket for non-existant instance disconnected !!!" );
    }
    
    ds_list_add( log, "network_type_disconnect for socket " + string( msg_new_socket ) );
    
} else if ( msg_type == network_type_data ) { //If this message is a data packet
    
    //We deal with this in the next piece of code.
    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Packet handling

var in_buffer, in_buffer_size, inst, message_type, seed;

if ( is_real( msg_type ) ) if ( msg_type == network_type_data ) { //If this message is a data packet
    
    //Find the client instance
    inst = ds_map_find_value( socket_to_inst_map, msg_socket );
    
    //Catch weirdness
    if ( !instance_exists( inst ) ) {
        ds_list_add( log, "??? packet from unknown socket " + string( msg_socket ) + " ???" );
        exit;
    }
    
    in_buffer = ds_map_find_value( async_load, "buffer" ); //Get the buffer that represents the data from the packet
    in_buffer_size = ds_map_find_value( async_load, "size" );
    message_type = buffer_read( in_buffer, buffer_u16 ); //Work out what the message type is
    
    switch( message_type ) {
        
        case client_req_handshake_msg: { //Handshake request from client
            
            ds_list_add( log, "client_request_handshake on " + string( msg_socket ) );
            ds_list_add( chat, "A player has joined the server." );
            
            scr_server_send_handshake( inst );
            
            scr_remove_all_timed_ticket( inst, tkt_ping_timeout );
            break;
        }
        
        case req_ping_msg: { //Ping request from client
            
            //ds_list_add( log, "req_ping on " + string( msg_socket ) );
            
            with( inst ) scr_send_ping();
            
            scr_remove_all_timed_ticket( inst, tkt_ping_timeout );
            break;
        }
        
        case send_chat_msg: { //Chat message from client
            
            str = buffer_read( in_buffer, buffer_string );
            str = string( inst ) + "&gt; " + string( str );
            
            with( obj_user ) scr_server_send_chat( id, other.str );
            ds_list_add( chat, str );
            
            scr_remove_all_timed_ticket( inst, tkt_ping_timeout );
            break;
        }
        
        case client_finished_regen_msg: { //Notification of complete regeneration
            
            scr_remove_all_timed_ticket( inst, tkt_ping_timeout );
            break;
        }
        
        case client_started_msg: { //Notification of client started
            
            ds_list_add( log, string( inst ) + " has started" );
            inst.user_started = true;
            
            scr_remove_all_timed_ticket( inst, tkt_ping_timeout );
            break;
        }
        
        default: { //error / corruption catching
            ds_list_add( log, "??? unknown data packet (" + string( message_type ) + " on " + string( msg_socket ) + ") ???" );
            break;
        }
    }  
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
