<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create

var inst;

window_global_mouse_over = noone;

window_children = ds_list_create();
window_surface = noone;

window_local_x = 0;
window_local_y = 0;
window_screen_x = 0;
window_screen_y = 0;
window_width = room_width;
window_height = room_height;
window_moveable = false;
window_closeable = false;

ds_list_add( log, "Window layer started" );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Step

var i, inst;

window_global_mouse_over = noone;

for( i = ds_list_size( window_children ) - 1; i &gt;= 0; i-- ) {
    inst = ds_list_find_value( window_children, i );
    with( inst ) event_user( 1 );
}

//surface_set_target( application_surface );
//draw_clear( background_color );
//surface_reset_target();

for( i = 0; i &lt; ds_list_size( window_children ); i++ ) {
    inst = ds_list_find_value( window_children, i );
    with( inst ) event_user( 2 );
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///HUD
var i, inst;

//Reset the draw settings for safety
draw_set_color( c_white );
draw_set_alpha( 1 );

//Loading bar
if ( !obj_world.generation_finished ) {
    
    draw_set_alpha( obj_camera.reveal_fade );
    
    draw_set_color( c_custom_purple );
    draw_rectangle( view_wview[0] * 0.33, view_hview[0] - 20, view_wview[0] * 0.66, view_hview[0] - 10, true );
    
    draw_set_color( c_white );
    draw_rectangle( view_wview[0] * 0.33, view_hview[0] - 20, view_wview[0] * lerp( 0.33, 0.66, obj_world.progress ), view_hview[0] - 10, false );
    draw_rectangle( view_wview[0] * 0.33, view_hview[0] - 20, view_wview[0] * 0.66, view_hview[0] - 10, true );
    
    draw_set_color( c_off_white );
    draw_set_font( fnt_small );
    draw_set_halign( fa_center );
    draw_text( view_wview[0] * 0.5, view_hview[0] - 44, string( floor( obj_world.progress * 100 ) ) + "%" );
    draw_set_halign( fa_left );
    
    draw_set_alpha( 1 );
    
}

if ( instance_exists( obj_change_resolution )) {
    
    draw_set_color( c_custom_purple );
    draw_rectangle( 0, 0, view_wview[0] - 1, view_hview[0] - 1, false );
    draw_set_color( c_white );
    
    if ( obj_world.generation_finished ) {
        draw_rectangle( view_wview[0] * 0.33, view_hview[0] - 20, view_wview[0] * lerp( 0.33, 0.66, obj_change_resolution.step_number / 4 ), view_hview[0] - 10, false );
        draw_rectangle( view_wview[0] * 0.33, view_hview[0] - 20, view_wview[0] * 0.66, view_hview[0] - 10, true );
    }
    
} else {

    //Window handling
    for( i = 0; i &lt; ds_list_size( window_children ); i++ ) {
    
        inst = ds_list_find_value( window_children, i );
        
        if ( surface_exists( inst.window_surface ) ) draw_surface( inst.window_surface, inst.window_local_x, inst.window_local_y );
        
        if ( k_window_drop_shadow_alpha &gt; 0 ) {
            draw_set_alpha( k_window_drop_shadow_alpha );
            draw_set_color( c_black );
            draw_rectangle( inst.window_local_x + k_window_drop_shadow_size, inst.window_local_y + inst.window_height, inst.window_local_x + inst.window_width - 1, inst.window_local_y + inst.window_height + k_window_drop_shadow_size, false );
            draw_rectangle( inst.window_local_x + inst.window_width, inst.window_local_y + k_window_drop_shadow_size, inst.window_local_x + inst.window_width + k_window_drop_shadow_size - 1, inst.window_local_y + inst.window_height + k_window_drop_shadow_size, false );
            draw_set_alpha( 1 );
            draw_set_color( c_white );
        }
        
    }
    
}

//Reset the draw settings for safety
draw_set_color( c_white );
draw_set_alpha( 1 );
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
